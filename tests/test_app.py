from unittest import mock

import pytest
from barrier.configure import RequiredEnvironmentError
from flask import url_for


def passthrough(f):
    def wrapper(*args, **kwargs):
        return f(*args, **kwargs)

    return wrapper


def test_client_secrets_json_missing():
    """Should fail to import/run service without a client-secrets.json generated by ``barrier-config``."""
    with pytest.raises(RequiredEnvironmentError, match="client-secrets.json"):
        from barrier import app  # noqa: F401


def test_secret_key_missing():
    """Should fail to import/run service without a secret key to sign/verify requests via HMAC."""
    with mock.patch("flask_oidc.OpenIDConnect"):
        with pytest.raises(RequiredEnvironmentError, match="BARRIER_SECRET_KEY"):
            from barrier import app  # noqa: F401


def test_root_route_without_session(client):
    """Should induce redirect to index.html."""
    from barrier.app import app

    response = client.get("/")
    assert response.status_code == 302
    assert response.location.endswith(app.config["DEFAULT_RESOURCE"])


def test_login_route_without_session(client):
    """Should induce redirect to login page."""
    from barrier.app import oidc

    response = client.get(url_for(".login"))
    assert response.location.startswith(oidc.client_secrets["auth_uri"])


def test_logout_route_without_session(client):
    """Should induce redirect to login page."""
    from barrier.app import oidc

    response = client.get(url_for(".logout"))
    assert response.location.startswith(oidc.client_secrets["auth_uri"])


def test_resource_proxy_route_without_session(client):
    """Should induce redirect to login page."""
    from barrier.app import oidc

    response = client.get("/some-resource.html")
    assert response.location.startswith(oidc.client_secrets["auth_uri"])


def test_root_route_with_session(client):
    """Should induce redirect to index.html."""
    from barrier.app import app

    with mock.patch("barrier.app.oidc.require_login", passthrough):
        response = client.get("/")

    assert response.status_code == 302
    assert response.location.endswith(app.config["DEFAULT_RESOURCE"])


def test_login_route_with_session(client):
    """Should induce redirect to login page."""
    from barrier.app import oidc

    with mock.patch("barrier.app.oidc.require_login", passthrough):
        response = client.get(url_for(".login"))
    assert response.location.startswith(oidc.client_secrets["auth_uri"])


def test_logout_route_with_session(client):
    """Should induce redirect to login page."""
    from barrier.app import oidc
    with mock.patch("barrier.app.oidc.require_login", passthrough):
        response = client.get(url_for(".logout"))
    assert response.location.startswith(oidc.client_secrets["auth_uri"])


def test_resource_proxy_route_with_session(client, ):
    """Should induce redirect to login page."""
    from barrier.app import oidc
    with mock.patch("barrier.app.oidc.require_login", passthrough):
        response = client.get("/some-resource.html")
    assert response.location.startswith(oidc.client_secrets["auth_uri"])